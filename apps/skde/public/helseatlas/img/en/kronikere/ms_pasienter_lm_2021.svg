<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" baseProfile="full" version="1.1" id="SVGMain" onload='SVGMain_Init("SVGMain")' viewBox="-1 -1 2188 1563">
<desc id="desc_SVGMain">The SGPlot Procedure</desc>
<defs>
<clipPath id="SVGMain_clipPage1">
<rect x="-1" y="-1" width="2188" height="1563"></rect>
</clipPath>
</defs>
<g id="SVGMain_Page1" clip-path="url(#SVGMain_clipPage1)">
<g transform=" scale(3.12428, 3.124)">
<rect x="0.0" y="0.0" width="699.0" height="499.0" style="fill: #FFFFFF; "></rect>
<rect x="0.0" y="0.0" width="699.0" height="499.0" style="fill: #FFFFFF; "></rect>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 10.0, 10.0)">
<defs>
<clipPath id="SVGMain_ClipPath0">
<rect x="-1.0" y="-1.0" width="681.0" height="481.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath0)">
<defs>
<clipPath id="SVGMain_ClipPath1">
<rect x="-1.0" y="-1.0" width="681.0" height="481.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath1)">
<rect x="103.34801" y="39.41787" width="575.15418" height="405.15592" style="fill: #FFFFFF; "></rect>
<defs>
<clipPath id="SVGMain_ClipPath2">
<rect x="102.0" y="38.0" width="578.0" height="408.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath2)">
<rect x="113.83259" y="51.09854" width="537.20998" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
<rect x="113.83259" y="116.36257" width="244.03362" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
<rect x="113.83259" y="181.62661" width="210.64175" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
<rect x="113.83259" y="246.89064" width="195.94093" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
<rect x="113.83259" y="312.15467" width="36.54204" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
<rect x="113.83259" y="377.41871" width="13.02072" height="55.47442" style="fill: #AB6CA6; fill-opacity: 0.8; "></rect>
</g>
<defs>
<clipPath id="SVGMain_ClipPath3">
<rect x="-1.0" y="-1.0" width="681.0" height="481.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath3)">
<path d="M102.84875 445.07276L679.00146 445.07276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<path d="M113.83259 445.07276L113.83259 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 109.33259, 472.42276)">
<text textLength="9.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000030;</text>
</g>
<path d="M218.83846 445.07276L218.83846 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 205.33846, 472.42276)">
<text textLength="27.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000035;&#x000030;&#x000030;</text>
</g>
<path d="M323.84432 445.07276L323.84432 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 303.84432, 472.42276)">
<text textLength="40.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000031;&#x00002C;&#x000030;&#x000030;&#x000030;</text>
</g>
<path d="M428.85018 445.07276L428.85018 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 408.85018, 472.42276)">
<text textLength="40.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000031;&#x00002C;&#x000035;&#x000030;&#x000030;</text>
</g>
<path d="M533.85604 445.07276L533.85604 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 513.85604, 472.42276)">
<text textLength="40.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000032;&#x00002C;&#x000030;&#x000030;&#x000030;</text>
</g>
<path d="M638.8619 445.07276L638.8619 452.67276" style="stroke: #989EA1; stroke-width: 1; fill: none; "></path>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 618.8619, 472.42276)">
<text textLength="40.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000032;&#x00002C;&#x000035;&#x000030;&#x000030;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 8.2441, 410.65592)">
<text textLength="87.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x00004F;&#x000063;&#x000072;&#x000065;&#x00006C;&#x000069;&#x00007A;&#x000075;&#x00006D;&#x000061;&#x000062;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 1.2441, 345.39189)">
<text textLength="94.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000041;&#x00006C;&#x000065;&#x00006D;&#x000074;&#x000075;&#x00007A;&#x000075;&#x00006D;&#x000061;&#x000062;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 9.2441, 280.12785)">
<text textLength="86.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x00004E;&#x000061;&#x000074;&#x000061;&#x00006C;&#x000069;&#x00007A;&#x000075;&#x00006D;&#x000061;&#x000062;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 17.2441, 214.86382)">
<text textLength="78.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000046;&#x000069;&#x00006E;&#x000067;&#x00006F;&#x00006C;&#x000069;&#x00006D;&#x00006F;&#x000064;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 32.2441, 149.59979)">
<text textLength="63.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000043;&#x00006C;&#x000061;&#x000064;&#x000072;&#x000069;&#x000062;&#x000069;&#x00006E;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 17.2441, 84.33575)">
<text textLength="78.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 16px; white-space: pre; ">&#x000052;&#x000069;&#x000074;&#x000075;&#x00006B;&#x000073;&#x000069;&#x00006D;&#x000061;&#x000062;</text>
</g>
<g transform="matrix(1.0, 0.0, 0.0, 1.0, 1.2441, 24.41891)">
<text textLength="196.0" lengthAdjust="spacingAndGlyphs" x="0.0" y="0.5" style="fill: #000000; font-family: 'SVGMain_Arial Font3', 'Arial', sans-serif; font-size: 23px; white-space: pre; ">&#x000048;&#x000069;&#x000067;&#x000068;&#x00002D;&#x000065;&#x000066;&#x000066;&#x000069;&#x000063;&#x000061;&#x000063;&#x000079;&#x000020;&#x000064;&#x000072;&#x000075;&#x000067;&#x000073;</text>
</g>
</g>
</g>
</g>
<defs>
<clipPath id="SVGMain_ClipPath4">
<rect x="102.0" y="38.0" width="578.0" height="408.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath4)">
</g>
<defs>
<clipPath id="SVGMain_ClipPath5">
<rect x="-1.0" y="-1.0" width="681.0" height="481.0" ></rect>
</clipPath>
</defs>
<g clip-path="url(#SVGMain_ClipPath5)">
</g>
</g>
</g>
<rect x="0" y="0" width="2187" height="1562" fill="#FFFFFF" fill-opacity="0" aria-hidden="true">
<desc>The SGPlot Procedure</desc>
</rect>
</g>
<g id="SVGMain_singleTip1" visibility="hidden" pointer-events="none">
   <rect id="SVGMain_singleBox1" x="0" y="0" width="88" height="20" rx="2" ry="2" fill="white" stroke="black" stroke-width="2.73375" opacity="0.8"></rect>
   <text id="SVGMain_singleText1" x="5" y="27" font-family="'Albany AMT', sans-serif" font-size="21"><tspan id="SVGMain_tiptspan1" x="13" class="tiptext"><![CDATA[ ]]></tspan></text>
</g>
<defs>
<style type="text/css"><![CDATA[
    tspan.tiptext { white-space: pre }
]]></style>
</defs>
<defs>
<style type="text/css"><![CDATA[
  @font-face {
      font-family: "SVGMain_Arial Font3";
      src: url("#SVGMain_Font3") format("svg")
      }
]]></style>
<font id="SVGMain_Font3" horiz-adv-x="6144" >
   <font-face      font-family="SVGMain_Arial Font3"
    units-per-em="2048" ascent="1854" descent="-434" >
      <font-face-src>
         <font-face-name name="SVGMain_Arial Font3"></font-face-name>
      </font-face-src>
   </font-face>
<missing-glyph><path d="M0 0v4992h3456v-4992h-3456" fill="none"></path>
</missing-glyph>
<glyph unicode="&#40;" horiz-adv-x="680" 
d="M469 -426Q326 -238 227 12 T128 534Q128 772 202 990 Q288 1242 469 1493 L597 1493Q476 1285 437 
1196 Q376 1058 341 908 Q298 722 298 533 Q298 52 597 -426 Z" ></glyph>
<glyph unicode="&#47;" horiz-adv-x="552" 
d="M0 0L426 1493L602 1493L175 0L0 0Z" ></glyph>
<glyph unicode="&#104;" horiz-adv-x="1147" 
d="M128 0L128 1493L298 1493L298 991Q432 1152 635 1152 Q760 1152 852 1102 T984 966T1024 714L1024 
0L853 0L853 709Q853 852 789 916 T607 981Q519 981 441 937 T331 819T298 612L298 0L
128 0Z" ></glyph>
<glyph unicode="&#65;" horiz-adv-x="1360" 
d="M-8 0L590 1493L732 1493L1331 0L1152 0L978 469L344 469L170 0L-8 0ZM408 640L914 
640L776 1012Q708 1198 661 1322 Q608 1180 556 1041 Z" ></glyph>
<glyph unicode="&#103;" horiz-adv-x="1147" 
d="M128 -85L298 -128Q310 -190 361 -218 Q429 -256 548 -256 Q676 -256 745 -210 T840 -82Q854 -32 853 
128 Q732 0 553 0 Q330 0 207 167 T85 569Q85 730 140 867 T299 1077T544 1152Q731 1152 
853 981 L853 1109L1024 1109L1024 164Q1024 -90 973 -196 T814 -365T546 -426Q356 -426 240 -341 T128 
-85ZM256 583Q256 368 341 269 T554 170Q681 170 767 269 T853 577Q853 777 764 879 T551 981Q
428 981 342 881 T256 583Z" ></glyph>
<glyph unicode="&#48;" horiz-adv-x="1147" 
d="M85 746Q85 1005 140 1174 T303 1418T576 1493Q697 1493 799 1446 T950 1309T1032 1091T1066 746Q1066 
488 1012 320 T849 75T576 0Q358 0 234 130 Q85 334 85 746ZM256 746Q256 378 348 274 T
576 170Q711 170 803 275 T896 746Q896 1094 809 1208 T574 1322Q438 1322 346 1222 Q256 1093 256 
746Z" ></glyph>
<glyph unicode="&#53;" horiz-adv-x="1147" 
d="M85 426L256 426Q278 299 350 235 T560 170Q733 170 814 267 T896 524Q896 677 823 765 T573 
853Q462 853 401 806 T298 682L128 725L298 1493L981 1493L981 1322L434 1322L338 925Q469 1024 613 
1024 Q804 1024 935 887 T1066 536Q1066 332 949 182 Q807 0 560 0 Q358 0 230 117 T85 426Z" ></glyph>
<glyph unicode="&#49;" horiz-adv-x="1147" 
d="M768 0L597 0L597 1163Q528 1100 415 1037 T213 943L213 1120Q372 1192 490 1294 T658 1493L768 
1493L768 0Z" ></glyph>
<glyph unicode="&#44;" horiz-adv-x="552" 
d="M170 0L170 170L341 170L341 0Q341 -116 310 -188 T213 -298L170 -213Q212 -188 233 -139 T255 
0Z" ></glyph>
<glyph unicode="&#50;" horiz-adv-x="1147" 
d="M1024 170L1024 0L42 0Q40 64 66 124 Q106 222 196 313 T435 517Q667 722 760 838 T853 
1066Q853 1174 772 1248 T560 1322Q422 1322 340 1243 T256 1024L85 1066Q104 1274 229 1384 T564 1493Q
776 1493 900 1373 T1024 1075Q1024 984 987 897 T865 714T594 452Q430 316 380 268 T299 170Z" ></glyph>
<glyph unicode="&#79;" horiz-adv-x="1572" 
d="M85 726Q85 1106 282 1321 T790 1536Q994 1536 1157 1435 T1407 1153T1493 744Q1493 512 1403 329 T1147 
51T789 -42Q581 -42 417 61 T169 345T85 525ZM256 724Q256 446 407 287 T788 128Q1021 128 
1172 289 T1322 745Q1322 932 1258 1072 T1070 1288T791 1365Q572 1365 414 1217 T256 724Z" ></glyph>
<glyph unicode="&#99;" horiz-adv-x="1020" 
d="M853 426L1024 384Q994 204 873 102 T575 0Q354 0 219 148 T85 572Q85 750 141 884 T313 
1085T562 1152Q733 1152 842 1063 T981 810L810 768Q785 874 721 927 T566 981Q428 981 342 884 T
256 576Q256 364 343 267 T570 170Q682 170 758 233 T853 426Z" ></glyph>
<glyph unicode="&#114;" horiz-adv-x="680" 
d="M128 0L128 1109L256 1109L256 982Q326 1086 385 1119 T516 1152Q619 1152 725 1082 L658 911Q586 
981 515 981 Q452 981 401 942 T330 835Q298 730 298 606 L298 0L128 0Z" ></glyph>
<glyph unicode="&#101;" horiz-adv-x="1147" 
d="M894 384L1061 341Q1017 179 898 89 T592 0Q359 0 222 149 T85 566Q85 844 223 998 T582 
1152Q796 1152 931 997 T1066 563Q1066 546 1066 512 L256 512Q266 346 361 258 T596 170Q702 170 
776 221 T894 384ZM256 682L896 682Q883 814 822 879 Q730 981 582 981 Q448 981 357 900 T256 
682Z" ></glyph>
<glyph unicode="&#108;" horiz-adv-x="425" 
d="M128 0L128 1493L298 1493L298 0L128 0Z" ></glyph>
<glyph unicode="&#105;" horiz-adv-x="425" 
d="M128 1322L128 1493L298 1493L298 1322L128 1322ZM128 0L128 1109L298 1109L298 0L128 0Z" ></glyph>
<glyph unicode="&#122;" horiz-adv-x="1020" 
d="M42 0L42 160L708 938Q596 938 510 938 L85 938L85 1109L938 1109L938 964L356 284L259 
170Q381 170 487 170 L981 170L981 0L42 0Z" ></glyph>
<glyph unicode="&#117;" horiz-adv-x="1147" 
d="M853 0L853 196Q724 0 504 0 Q406 0 322 36 T197 129T139 265Q128 320 128 437 L128 
1109L298 1109L298 515Q298 373 310 324 Q329 252 390 211 T541 170Q630 170 709 212 T820 326T
853 536L853 1109L1024 1109L1024 0L853 0Z" ></glyph>
<glyph unicode="&#109;" horiz-adv-x="1700" 
d="M128 0L128 1109L298 1109L298 963Q348 1048 429 1100 T616 1152Q732 1152 807 1098 T912 950Q1040 
1152 1245 1152 Q1406 1152 1492 1059 T1578 773L1578 0L1408 0L1408 706Q1408 820 1389 870 T1323 950T
1210 981Q1093 981 1016 902 T938 651L938 0L768 0L768 728Q768 854 722 918 T572 981Q493 
981 426 939 T329 815T298 581L298 0L128 0Z" ></glyph>
<glyph unicode="&#97;" horiz-adv-x="1147" 
d="M853 128Q759 58 664 29 T459 0Q279 0 182 89 T85 316Q85 396 122 463 T218 571T352 
632Q408 647 518 660 Q745 688 852 725 Q853 761 853 771 Q853 878 800 922 Q728 981 586 981 Q
454 981 391 934 T298 768L128 810Q152 928 207 1001 T367 1113T610 1152Q747 1152 832 1118 T958 
1032T1014 903Q1024 854 1024 734 L1024 495Q1024 245 1032 161 T1066 0L896 0Q862 54 853 128ZM
853 554Q746 518 532 492 Q411 477 361 458 T283 404T256 326Q256 259 315 215 T489 170Q602 
170 691 214 T820 330Q852 386 852 494 Z" ></glyph>
<glyph unicode="&#98;" horiz-adv-x="1147" 
d="M298 0L128 0L128 1493L298 1493L298 987Q416 1152 600 1152 Q702 1152 792 1111 T942 995T1033 
816T1066 592Q1066 309 928 154 T599 0Q407 0 298 181 ZM298 584Q298 394 352 309 Q442 170 
593 170 Q716 170 806 272 T896 576Q896 784 810 882 T601 981Q478 981 388 879 T298 584Z" ></glyph>
<glyph unicode="&#116;" horiz-adv-x="552" 
d="M512 175L554 16Q479 0 419 0 Q322 0 268 31 T192 112T170 326L170 938L42 938L42 
1109L170 1109L170 1372L341 1480L341 1109L512 1109L512 938L341 938L341 318Q341 240 350 218 T379 
183T437 170Q466 170 512 175Z" ></glyph>
<glyph unicode="&#78;" horiz-adv-x="1487" 
d="M170 0L170 1493L354 1493L1152 269L1152 1493L1322 1493L1322 0L1138 0L341 1224L341 0L170 
0Z" ></glyph>
<glyph unicode="&#70;" horiz-adv-x="1232" 
d="M170 0L170 1493L1152 1493L1152 1322L341 1322L341 853L1024 853L1024 682L341 682L341 0L170 
0Z" ></glyph>
<glyph unicode="&#110;" horiz-adv-x="1147" 
d="M128 0L128 1109L298 1109L298 958Q420 1152 648 1152 Q748 1152 831 1115 T955 1019T1013 878Q1024 
825 1024 692 L1024 0L853 0L853 681Q853 798 830 855 T748 947T609 981Q482 981 390 904 T
298 612L298 0L128 0Z" ></glyph>
<glyph unicode="&#111;" horiz-adv-x="1147" 
d="M85 576Q85 882 247 1029 Q382 1152 576 1152 Q792 1152 929 1003 T1066 591Q1066 378 1005 256 T829 
67T576 0Q356 0 220 148 T85 576ZM256 576Q256 373 347 272 T576 170Q714 170 805 272 T
896 582Q896 778 804 880 T576 981Q438 981 347 880 T256 576Z" ></glyph>
<glyph unicode="&#100;" horiz-adv-x="1147" 
d="M853 0L853 182Q750 0 550 0 Q421 0 313 72 T145 275T85 574Q85 740 140 874 T305 
1080T550 1152Q649 1152 727 1105 T853 984L853 1493L1024 1493L1024 0L853 0ZM256 575Q256 372 
345 271 T558 170Q681 170 767 267 T853 560Q853 778 765 879 T549 981Q424 981 340 883 T256 
575Z" ></glyph>
<glyph unicode="&#67;" horiz-adv-x="1487" 
d="M1237 518L1408 466Q1346 218 1184 87 T788 -42Q546 -42 395 57 T164 348T85 758Q85 996 173 
1174 T424 1444T782 1536Q1004 1536 1155 1419 T1365 1092L1194 1045Q1140 1212 1036 1289 T776 1365Q596 1365 
475 1280 T305 1053T256 759Q256 564 315 418 T499 200T770 128Q948 128 1071 226 T1237 518Z" ></glyph>
<glyph unicode="&#82;" horiz-adv-x="1487" 
d="M170 0L170 1493L798 1493Q995 1493 1097 1453 T1261 1311T1322 1087Q1322 929 1221 820 T908 682Q972 
639 1004 597 Q1075 506 1148 408 L1392 0L1198 0L1003 312Q918 447 863 519 T764 625T675 674Q
642 682 567 682 L341 682L341 0L170 0ZM341 853L760 853Q893 853 978 880 T1107 965T1152 
1092Q1152 1192 1069 1257 T806 1322L341 1322L341 853Z" ></glyph>
<glyph unicode="&#107;" horiz-adv-x="1020" 
d="M128 0L128 1493L298 1493L298 647L758 1109L981 1109L570 696L1024 0L829 0L453 578L298 
422L298 0L128 0Z" ></glyph>
<glyph unicode="&#115;" horiz-adv-x="1020" 
d="M85 341L256 384Q270 280 338 225 T527 170Q649 170 708 219 T768 332Q768 391 710 424 Q670 
448 534 483 Q352 536 278 574 T166 680T128 830Q128 904 158 968 T242 1074Q282 1106 350 1129 T
498 1152Q616 1152 705 1116 T837 1018T896 853L725 810Q714 891 661 936 T511 981Q396 981 347 
942 T298 850Q298 817 318 790 Q339 763 382 745 Q407 735 529 701 Q706 648 780 613 T896 514T
938 352Q938 258 888 174 T741 45T524 0Q324 0 219 86 T85 341Z" ></glyph>
<glyph unicode="&#72;" horiz-adv-x="1487" 
d="M170 0L170 1493L341 1493L341 896L1152 896L1152 1493L1322 1493L1322 0L1152 0L1152 725L341 
725L341 0L170 0Z" ></glyph>
<glyph unicode="&#45;" horiz-adv-x="680" 
d="M85 426L85 597L640 597L640 426L85 426Z" ></glyph>
<glyph unicode="&#102;" horiz-adv-x="552" 
d="M170 0L170 938L0 938L0 1109L170 1109L170 1210Q170 1306 188 1352 Q213 1415 276 1454 T456 
1493Q532 1493 624 1474 L597 1314Q541 1322 491 1322 Q409 1322 375 1294 T341 1188L341 1109L554 1109L
554 938L341 938L341 0L170 0Z" ></glyph>
<glyph unicode="&#121;" horiz-adv-x="977" 
d="M128 -405L85 -240Q146 -256 192 -256 Q254 -256 292 -235 T353 -177Q370 -149 410 -38 Q415 -22 426 
7 L42 1109L220 1109L436 510Q477 396 532 270 Q551 333 566 453 L768 1109L944 1109L594 -30Q
530 -198 494 -261 Q448 -346 387 -386 T242 -426Q190 -426 128 -405Z" ></glyph>
<glyph unicode="&#32;" horiz-adv-x="552" 
></glyph>
</font>
</defs>
<script type="text/ecmascript"><![CDATA[
var SVGMain_SVGRoot = null;
var SVGMain_viewBox = null;
var SVGMain_TrueCoords = null;
var SVGMain_singleTip = null;
var SVGMain_singleBox = null;
var SVGMain_singleText = null;
var SVGMain_tiptspan = null;
var SVGMain_attrScale = 1;
var SVGMain_rightEdge = null;
var SVGMain_SVGHeight = null;
var SVGMain_SVGWidth = null;
function SVGMain_Init(anchor) {
   SVGMain_SVGRoot = document.getElementById(anchor);
   SVGMain_TrueCoords = SVGMain_SVGRoot.createSVGPoint();
   SVGMain_singleTip = document.getElementById(anchor + '_singleTip1');
   SVGMain_singleBox = document.getElementById(anchor + '_singleBox1');
   SVGMain_singleText = document.getElementById(anchor + '_singleText1');
   SVGMain_tiptspan = document.getElementById(anchor + '_tiptspan1');
   SVGMain_tiptspan.firstChild.nodeValue = null;
   SVGMain_SVGRoot.addEventListener('mousemove', SVGMain_ShowTooltip, false);
   SVGMain_SVGRoot.addEventListener('mouseout', SVGMain_HideTooltip, false);
   SVGMain_SVGHeight = SVGMain_SVGRoot.getAttributeNS(null, "height");
   SVGMain_SVGWidth = SVGMain_SVGRoot.getAttributeNS(null, "width");
   if (!isNaN(parseFloat(SVGMain_SVGHeight)) && !isNaN(parseFloat(SVGMain_SVGWidth)))
      SVGMain_GetHW();
   SVGMain_viewBox  = new ViewBox(SVGMain_SVGRoot);
}
function SVGMain_GetHW()
{
    if (SVGMain_SVGWidth != null && SVGMain_SVGWidth != "") {
       if (SVGMain_SVGWidth.match(/%/)) {
          var factor = parseFloat(SVGMain_SVGWidth.replace(/%/,""))/100;
          SVGMain_SVGWidth = window.innerWidth * factor;
       }
       else if (SVGMain_SVGWidth.match(/in/))
          SVGMain_SVGWidth = parseFloat(SVGMain_SVGWidth.replace(/in/,""))*300;
       else if (SVGMain_SVGWidth.match(/cm/))
          SVGMain_SVGWidth = parseFloat(SVGMain_SVGWidth.replace(/in/,""))*300/2.54;
       else
           SVGMain_SVGWidth = parseFloat(SVGMain_SVGWidth);
    }
    if (SVGMain_SVGHeight != null && SVGMain_SVGHeight != "") {
       if (SVGMain_SVGHeight.match(/%/)) {
          var factor = parseFloat(SVGMain_SVGHeight.replace(/%/,""))/100;
          SVGMain_SVGHeight = window.innerHeight * factor;
       }
       else if (SVGMain_SVGHeight.match(/in/))
          SVGMain_SVGHeight = parseFloat(SVGMain_SVGHeight.replace(/in/,""))*300;
       else if (SVGMain_SVGHeight.match(/cm/))
          SVGMain_SVGHeight = parseFloat(SVGMain_SVGHeight.replace(/in/,""))*300/2.54;
       else
           SVGMain_SVGHeight = parseFloat(SVGMain_SVGHeight);
    }
}
function SVGMain_GetScaleFactors(evt)
{
   var zoomFactor = 1;
   windowWidth  = (top.innerWidth==undefined)  ? window.innerWidth  : top.innerWidth;
   windowHeight = (top.innerHeight==undefined) ? window.innerHeight : top.innerHeight;
   SVGMain_rightEdge = (SVGMain_SVGWidth) ? SVGMain_SVGWidth - window.pageXOffset : windowWidth;
   if (parseFloat(SVGMain_SVGWidth) > 0 || parseFloat(SVGMain_SVGHeight) > 0)
      var tipScale = 0.54869;
   else {
      var tipXScale  = (screen.width/windowWidth) / SVGMain_SVGRoot.currentScale;
      var tipYScale  = (screen.height/windowHeight) / SVGMain_SVGRoot.currentScale;
      var tipScale   = (tipXScale + tipYScale)/2.0;
   }
   SVGMain_attrScale = tipScale;
   if (navigator.appName == 'Adobe SVG Viewer') {
      if (screen.deviceXDPI != null && screen.logicalXDPI != null)
         zoomFactor = screen.deviceXDPI/screen.logicalXDPI;
      SVGMain_attrScale = zoomFactor*tipScale;
   }
   else if (navigator.userAgent != null && navigator.userAgent != '') {
      var ua = navigator.userAgent.toLowerCase();
      if (ua.indexOf("msie") != -1 || ua.indexOf("trident") != -1) {
         zoomFactor = screen.deviceXDPI/screen.logicalXDPI;
         SVGMain_attrScale = tipScale/zoomFactor;
         SVGMain_rightEdge /= zoomFactor;
      }
      else if (ua.indexOf("ipad") != -1) {
         zoomFactor = SVGMain_SVGRoot.clientWidth / window.innerWidth;
         SVGMain_attrScale = 1.5 / zoomFactor;
         SVGMain_rightEdge /= zoomFactor;
      }
      else if (ua.indexOf("opera") != -1)
         SVGMain_attrScale = tipScale;
      else if (ua.indexOf("firefox") != -1)
         SVGMain_attrScale = tipScale;
      else {
         if (SVGMain_SVGWidth > 0 || SVGMain_SVGHeight > 0)
            zoomFactor = 1;
         else
            zoomFactor = parseInt(document.defaultView.getComputedStyle(SVGMain_SVGRoot, null).width,10)/
                                  SVGMain_SVGRoot.clientWidth;
         SVGMain_attrScale = tipScale/zoomFactor;
         SVGMain_rightEdge *= zoomFactor;
      }
   }
}
function SVGMain_GetTrueCoords(evt)
{
   var trans = SVGMain_SVGRoot.currentTranslate;
   var scale = SVGMain_SVGRoot.currentScale;
   SVGMain_GetScaleFactors();
   var p1    = SVGMain_SVGRoot.createSVGPoint();
   var p2;
   if (!SVGMain_SVGRoot.getScreenCTM) {
      var m = SVGMain_viewBox.getTM();
      m = m.scale( 1/scale );
      m = m.translate(-trans.x, -trans.y);
      p1.x = evt.clientX;
      p1.y = evt.clientY;
      p2 = p1.matrixTransform(m);
   }
   else {
      var m = SVGMain_SVGRoot.getScreenCTM();
      if (navigator.userAgent.toLowerCase().indexOf("ipad") != -1) {
         p1.x = evt.clientX + window.pageXOffset;
         p1.y = evt.clientY + window.pageYOffset;
      }
      else {
      p1.x = evt.clientX;
      p1.y = evt.clientY;
      }
      p2 = p1.matrixTransform(m.inverse());
   }
   SVGMain_TrueCoords.x = Math.round(p2.x*100) / 100;
   SVGMain_TrueCoords.y = Math.round(p2.y*100) / 100;
}
function SVGMain_HideTooltip( evt )
{
   SVGMain_tiptspan.firstChild.nodeValue = null;
   SVGMain_singleTip.setAttributeNS(null, 'visibility', 'hidden');
}
function SVGMain_ShowTooltip( evt )
{
   SVGMain_GetTrueCoords( evt );
   var targetElement = evt.target;
   var tspanCount = targetElement.getElementsByTagName('desc').length;
   if (tspanCount == 1) {
      var targetTspan = targetElement.getElementsByTagName('desc').item(0);
      if ( targetTspan) {
         if (targetTspan.firstChild != null)
            SVGMain_tiptspan.firstChild.nodeValue = targetTspan.firstChild.nodeValue; }
   }
   if ( '' != SVGMain_tiptspan.firstChild.nodeValue )
   {
      var outline = SVGMain_singleText.getBBox();
      SVGMain_singleBox.setAttributeNS(null, 'transform', 'scale(' + SVGMain_attrScale + ',' + SVGMain_attrScale + ')' );
      SVGMain_singleText.setAttributeNS(null, 'transform', 'scale(' + SVGMain_attrScale + ',' + SVGMain_attrScale + ')' );
      SVGMain_singleTip.setAttributeNS(null, 'visibility', 'visible');
      if (evt.clientX + ((outline.width + 27)/2.73375) * SVGMain_attrScale > SVGMain_rightEdge) {
         var xPos = SVGMain_TrueCoords.x - parseInt((outline.width + 27)*SVGMain_attrScale);
         if (xPos < 0)
            xPos = 0;
      }
      else
         var xPos = SVGMain_TrueCoords.x;
      if (SVGMain_TrueCoords.y < 54) {
         var yPos = SVGMain_TrueCoords.y + ((outline.height + 54)/2.73375)*SVGMain_attrScale;
         if (yPos > windowHeight)
            yPos = SVGMain_TrueCoords.y - parseInt((outline.height + 27)*SVGMain_attrScale);
      }
      else
         var yPos = SVGMain_TrueCoords.y - parseInt((outline.height + 27)*SVGMain_attrScale);
      if (Number(outline.width == 0))
         SVGMain_singleBox.setAttributeNS(null, 'width', outline.width);
      else
         SVGMain_singleBox.setAttributeNS(null, 'width', outline.width + 27);
      SVGMain_singleBox.setAttributeNS(null, 'height', outline.height + 27);
      SVGMain_singleTip.setAttributeNS(null, 'transform', 'translate(' + xPos + ',' + yPos + ')');
   }
}
/*****
*   ViewBox.js
*   copyright 2002, Kevin Lindsey
*****/
ViewBox.VERSION = "1.0";
/*****
*   constructor
*****/
function ViewBox(svgNode) {
    if ( arguments.length > 0 ) {
        this.init(svgNode);
    }
}
/*****
*   init
*****/
ViewBox.prototype.init = function(svgNode) {
    var viewBox = svgNode.getAttributeNS(null, "viewBox");
    var preserveAspectRatio = svgNode.getAttributeNS(null, "preserveAspectRatio");
      if ( viewBox != null && viewBox != "" ) {
        var params = viewBox.split(/\s*,\s*|\s+/);
        this.x      = parseFloat( params[0] );
        this.y      = parseFloat( params[1] );
        this.width  = parseFloat( params[2] );
        this.height = parseFloat( params[3] );
    }
    else {
        this.x      = 0;
        this.y      = 0;
        this.width  = window.innerWidth;
        this.height = window.innerHeight;
    }
    if (preserveAspectRatio != null && preserveAspectRatio != "" )
    {
        var params = preserveAspectRatio.split(/\s+/);
        var align  = params[0];
        if ( align == "none" ) {
            this.alignX = "none";
            this.alignY = "none";
        } else {
            this.alignX = align.substring(1,4);
            this.alignY = align.substring(5,9);
        }
        if ( params.length == 2 ) {
            this.meetOrSlice = params[1];
        } else {
            this.meetOrSlice = "meet";
        }
    } else {
        this.align  = "xMidYMid";
        this.alignX = "Mid";
        this.alignY = "Mid";
        this.meetOrSlice = "meet";
    }
}
ViewBox.prototype.getTM = function() {
    var matrix       = SVGMain_SVGRoot.createSVGMatrix();
    if (isNaN(parseFloat(SVGMain_SVGWidth)))
       var width = window.innerWidth;
    else
       var width = SVGMain_SVGWidth;
    if (isNaN(parseFloat(SVGMain_SVGHeight)))
       var height = window.innerHeight
    else
       var height = SVGMain_SVGHeight;
    var x_ratio = this.width  / width;
    var y_ratio = this.height / height;
    matrix = matrix.translate(this.x, this.y);
    if ( this.alignX == "none" ) {
        matrix = matrix.scaleNonUniform( x_ratio, y_ratio );
    } else {
        if ( x_ratio < y_ratio && this.meetOrSlice == "meet" ||
             x_ratio > y_ratio && this.meetOrSlice == "slice")
        {
           var x_trans = 0;
           var x_diff  = width*y_ratio - this.width;
           if ( this.alignX == "Mid" )
              x_trans = -x_diff/2;
           else if ( this.alignX == "Max" )
              x_trans = -x_diff;
           matrix = matrix.translate(x_trans, 0);
           matrix = matrix.scale( y_ratio );
        }
        else if ( x_ratio > y_ratio && this.meetOrSlice == "meet" ||
                  x_ratio < y_ratio && this.meetOrSlice == "slice"   )
        {
            var y_trans = 0;
            var y_diff  = height*x_ratio - this.height;
            if ( this.alignY == "Mid" )
               y_trans = -y_diff/2;
            else if ( this.alignY == "Max" )
                y_trans = -y_diff;
            matrix = matrix.translate(0, y_trans);
            matrix = matrix.scale( x_ratio );
        }
        else
            matrix = matrix.scale( x_ratio );
    }
    return matrix;
}
]]></script>
</svg>
